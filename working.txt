import boto3
import json
from decimal import Decimal

# Initialize services
discovery = boto3.client('discovery')
dynamodb = boto3.resource('dynamodb')
table = dynamodb.Table('MigrationPlans')

# Helper functions
def analyze_data(data):
    return {
        'cpu_usage': int(data.get('cpu_usage', 45)),
        'memory_usage': int(data.get('memory_usage', 60)),
        'storage_usage': int(data.get('storage_size', 50)),
        'network_bandwidth': int(data.get('network_bandwidth', 100)),
        'io_performance': int(data.get('io_performance', 200))
    }

def calculate_cost(service_type, instance_type, storage_size, network_bandwidth):
    instance_cost_map = {
        't2.micro': Decimal('0.0116'),
        't2.small': Decimal('0.023'),
        't2.medium': Decimal('0.0464'),
        't3.micro': Decimal('0.0120'),
        't3.small': Decimal('0.0240'),
        't3.medium': Decimal('0.0480'),
        'm5.large': Decimal('0.096'),
        'c5.large': Decimal('0.085')
    }
    storage_cost_per_gb = Decimal('0.1')
    network_cost_per_gb = Decimal('0.05')
    
    instance_cost = instance_cost_map.get(instance_type, Decimal('0.0116'))
    
    if service_type == 'database':
        instance_cost *= Decimal('1.5')
    
    return (instance_cost + Decimal(storage_size) * storage_cost_per_gb + Decimal(network_bandwidth) * network_cost_per_gb) * 30

def generate_recommendation(analysis_result):
    cpu_usage = analysis_result['cpu_usage']
    memory_usage = analysis_result['memory_usage']
    network_bandwidth = analysis_result['network_bandwidth']
    io_performance = analysis_result['io_performance']
    
    recommendations = []
    
    if cpu_usage < 50 and memory_usage < 50:
        recommendations.append("Use t2.micro instance or t3.micro instance for optimal cost.")
    elif cpu_usage < 80 and memory_usage < 75:
        recommendations.append("Use t2.small instance or t3.small instance to balance cost and performance.")
    else:
        recommendations.append("Use t2.medium instance or t3.medium instance for better performance and higher capacity.")
    
    if network_bandwidth > 100:
        recommendations.append("Consider higher network performance instances or services with enhanced networking.")
    
    if io_performance < 200:
        recommendations.append("Use instances with higher IOPS capabilities or storage optimized instances.")
    
    return ' '.join(recommendations)

def generate_roadmap(strategy=None, custom_phases=None):
    default_phases = [
        {'Phase': 'Assessment', 'Duration': '2 weeks', 'Activities': 'Gather requirements, analyze current workload, and performance metrics.'},
        {'Phase': 'Planning', 'Duration': '4 weeks', 'Activities': 'Design migration strategy, select instance types, and assess network and I/O needs.'},
        {'Phase': 'Execution', 'Duration': '6 weeks', 'Activities': 'Migrate workloads, perform testing, optimize performance, and adjust configurations.'},
        {'Phase': 'Validation', 'Duration': '2 weeks', 'Activities': 'Verify migration, ensure all functionalities are working, and finalize adjustments.'},
        {'Phase': 'Optimization', 'Duration': '2 weeks', 'Activities': 'Review performance, optimize cost and performance, and implement best practices.'}
    ]
    
    if custom_phases:
        return custom_phases
    
    if strategy == 'lift-and-shift':
        return [
            {'Phase': 'Assessment', 'Duration': '1 week', 'Activities': 'Identify and document workloads for migration.'},
            {'Phase': 'Planning', 'Duration': '2 weeks', 'Activities': 'Plan migration strategy, select instances.'},
            {'Phase': 'Execution', 'Duration': '3 weeks', 'Activities': 'Migrate workloads, perform basic testing.'},
            {'Phase': 'Validation', 'Duration': '1 week', 'Activities': 'Verify migration and address any issues.'},
        ]
    
    if strategy == 're-platform':
        return [
            {'Phase': 'Assessment', 'Duration': '2 weeks', 'Activities': 'Analyze workloads, identify re-platforming opportunities.'},
            {'Phase': 'Planning', 'Duration': '3 weeks', 'Activities': 'Design new architecture, select instance types.'},
            {'Phase': 'Execution', 'Duration': '4 weeks', 'Activities': 'Re-platform workloads, perform detailed testing.'},
            {'Phase': 'Validation', 'Duration': '2 weeks', 'Activities': 'Ensure functionality and optimize configurations.'},
        ]
    
    if strategy == 'refactor':
        return [
            {'Phase': 'Assessment', 'Duration': '3 weeks', 'Activities': 'Assess workloads, plan for application changes.'},
            {'Phase': 'Planning', 'Duration': '4 weeks', 'Activities': 'Design new application architecture, choose services.'},
            {'Phase': 'Execution', 'Duration': '6 weeks', 'Activities': 'Refactor applications, migrate data, and test thoroughly.'},
            {'Phase': 'Validation', 'Duration': '2 weeks', 'Activities': 'Validate new applications and performance optimization.'},
        ]
    
    return default_phases

# Lambda handler
def lambda_handler(event, context):
    try:
        data = json.loads(event['body'])
        workload_id = data.get('workload_id')
        service_type = data.get('service_type', 'general')
        instance_type = data.get('instance_type')
        storage_size = data.get('storage_size')
        network_bandwidth = data.get('network_bandwidth', 100)
        custom_phases = data.get('roadmap_phases', None)
        strategy = data.get('migration_strategy', None)  # Added migration strategy
        
        # Validate inputs
        if not all([workload_id, instance_type, storage_size]):
            return {
                'statusCode': 400,
                'headers': {
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': ' POST, OPTIONS',
                    'Access-Control-Allow-Headers': 'Content-Type'
                },
                'body': json.dumps({'error': 'Missing required fields'})
            }

        try:
            workload_id = Decimal(workload_id)
        except (ValueError, TypeError):
            return {
                'statusCode': 400,
                'headers': {
                    'Access-Control-Allow-Origin': '*',
                    'Access-Control-Allow-Methods': 'POST, OPTIONS',
                    'Access-Control-Allow-Headers': 'Content-Type'
                },
                'body': json.dumps({'error': 'Invalid workload_id format'})
            }

        # Data Analysis
        analysis_result = analyze_data(data)
        
        # Cost Estimation
        estimated_cost = calculate_cost(service_type, instance_type, storage_size, network_bandwidth)
        
        # Generate Recommendation
        recommendation = generate_recommendation(analysis_result)
        
        # Generate Roadmap
        roadmap = generate_roadmap(strategy, custom_phases)

        # Store in DynamoDB
        table.put_item(Item={
            'workload_id': workload_id,
            'ServiceType': service_type,
            'InstanceType': instance_type,
            'StorageSize': storage_size,
            'NetworkBandwidth': network_bandwidth,
            'AnalysisResult': json.dumps(analysis_result),
            'EstimatedCost': str(estimated_cost),
            'Recommendation': recommendation,
            'Roadmap': json.dumps(roadmap)
        })

        # Return the response
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type'
            },
            'body': json.dumps({
                'Recommendation': recommendation,
                'EstimatedCost': str(estimated_cost),
                'Roadmap': roadmap
            })
        }
    except Exception as e:
        return {
            'statusCode': 500,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type'
            },
            'body': json.dumps({'error': str(e)})
        }
